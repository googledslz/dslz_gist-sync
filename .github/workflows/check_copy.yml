name: Check Copy

on:
  workflow_dispatch:
  schedule:
    - cron: "*/10 * * * *"

jobs:
  check-copy:
    runs-on: ubuntu-latest

    env:
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
      GIST_ID: ${{ secrets.GIST_ID }}
      GIST_USER: ${{ secrets.GIST_USER }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Run embedded Python script
        run: |
python - <<'EOF'
import os, sys, pathlib, requests, yaml

# 检查环境变量
required_envs = ["GIST_TOKEN", "GIST_ID", "GIST_USER"]
missing = [name for name in required_envs if name not in os.environ]
if missing:
    print(f"❌ 缺少必要的环境变量: {', '.join(missing)}")
    sys.exit(1)

token = os.environ["GIST_TOKEN"]
gist_id = os.environ["GIST_ID"]
gist_user = os.environ["GIST_USER"]

# tmp 目录
repo_root = pathlib.Path('.')
tmp_dir = repo_root / "tmp"
tmp_dir.mkdir(parents=True, exist_ok=True)

cache_file = tmp_dir / "zhu_he_last.txt"
pc_file = tmp_dir / "pc.yaml"

# 下载 Gist 文件
base_url = f"https://gist.githubusercontent.com/{gist_user}/{gist_id}/raw"
zhu_he_url = f"{base_url}/ZHU_HE"
fu_xie_a_url = f"{base_url}/fu_xie_A"

try:
    zhu_he_content = requests.get(zhu_he_url).text.strip()
    fu_xie_a_content = requests.get(fu_xie_a_url).text.strip()
except Exception as e:
    print(f"❌ 下载 Gist 文件失败: {e}")
    sys.exit(1)

# 判断第一次运行或内容变化
first_run = not cache_file.exists()
old_content = cache_file.read_text(encoding="utf-8") if not first_run else ""

if first_run:
    print("🆕 第一次运行，强制生成 pc.yaml")
elif zhu_he_content != old_content:
    print("🔄 ZHU_HE 内容变化，更新并写入 pc.yaml")
else:
    print("✅ ZHU_HE 内容未变化，跳过更新 pc.yaml")
    sys.exit(0)

# 更新缓存
cache_file.write_text(zhu_he_content, encoding="utf-8")

# YAML proxies 去重
try:
    data = yaml.safe_load(zhu_he_content)
except Exception:
    print("⚠️ ZHU_HE 内容不是有效 YAML，直接原样写入 pc.yaml")
    data = {}

if isinstance(data, dict) and "proxies" in data:
    proxies = data["proxies"]
    seen = {}
    for proxy in proxies:
        base_name = proxy.get("name", "")
        if base_name not in seen:
            seen[base_name] = 1
        else:
            count = seen[base_name]
            new_name = f"{base_name}-{count}"
            while new_name in seen:
                count += 1
                new_name = f"{base_name}-{count}"
            proxy["name"] = new_name
            seen[base_name] += 1
            seen[new_name] = 1
    data["proxies"] = proxies
    zhu_he_fixed = yaml.dump(data, allow_unicode=True)
else:
    zhu_he_fixed = zhu_he_content

# 写入 pc.yaml
if pc_file.exists():
    pc_file.unlink()
pc_file.write_text(zhu_he_fixed + "\n" + fu_xie_a_content, encoding="utf-8")
print(f"✅ 已写入合并内容到 {pc_file}")
EOF

      - name: Debug tmp directory
        run: ls -R tmp || echo "tmp directory not found"

      - name: Show pc.yaml content
        run: cat tmp/pc.yaml || echo "pc.yaml not found"

      - name: Upload pc.yaml artifact
        uses: actions/upload-artifact@v4
        with:
          name: pc-yaml
          path: tmp/pc.yaml
          overwrite: true

      - name: Upload zhu_he_last.txt artifact
        uses: actions/upload-artifact@v4
        with:
          name: zhu_he-cache
          path: tmp/zhu_he_last.txt
          overwrite: true

      - name: Debug ENV
        run: |
          echo "GIST_TOKEN set? -> ${GIST_TOKEN:+YES}"
          echo "GIST_ID set? -> ${GIST_ID:+YES}"
          echo "GIST_USER set? -> ${GIST_USER:+YES}"
